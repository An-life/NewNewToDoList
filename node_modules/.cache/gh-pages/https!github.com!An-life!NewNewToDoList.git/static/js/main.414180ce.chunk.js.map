{"version":3,"sources":["API/todoList-api.ts","reportWebVitals.ts","Components/AddItemForm/AddItemForTodoList.tsx","Components/Editadlespan/EditableSpan.tsx","state/task-reducer.ts","features/TodoLists/ToDoList.tsx","state/todolistreducer.ts","App/AppRedux.tsx","state/Store.ts","index.tsx"],"names":["TaskStatuses","TodoTaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddItemForTodoList","React","memo","props","useState","title","setTitle","error","setError","addTask","useCallback","trim","addItem","console","log","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","onBlur","autoFocus","onDoubleClick","instance","axios","create","baseURL","withCredentials","headers","todoListApi","get","post","id","delete","put","todoListId","taskId","model","initialState","changeTaskTC","domainModel","todolistId","dispatch","getState","task","tasks","find","t","Error","apiModel","description","completed","status","New","priority","startDate","deadline","res","type","updateTaskAC","ToDoList","useDispatch","useEffect","setTasksAC","data","items","useSelector","state","removeTodoList","changeToDoListTitle","changeTodoListTitle","tasksForToDoList","filter","Completed","item","addTaskTC","Delete","map","className","Checkbox","newStatus","checked","removeTaskAC","Button","changeFilter","AppRedux","todoLists","todolists","action","removeTodoListsTC","newTitle","changeTitleTodolistAC","changeTodoListTitleTC","addTodoList","todoList","addTodoListsTC","AppBar","position","Toolbar","edge","area-label","Menu","Typography","Container","fixed","Grid","container","style","padding","spacing","tl","Paper","rootReducer","combineReducers","stateCopy","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.414180ce.chunk.js","sourcesContent":["import axios, {AxiosResponse} from 'axios';\r\n\r\nconst instance = axios.create({\r\n        baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n        withCredentials: true,\r\n        headers: {\r\n            'API-KEY': '5aecab3c-05b6-41db-afbc-a453341bf70f'\r\n        }\r\n    }\r\n)\r\n\r\n//api\r\nexport const todoListApi = {\r\n    getTodolist() {\r\n        const promise = instance.get<Array<TodoListType>>('todo-lists')\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodoListType }>>('todo-lists', {title: title})\r\n        return promise;\r\n    },\r\n    deleteTodoList(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`)\r\n        return promise;\r\n    },\r\n    updateTodoList(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title})\r\n        return promise;\r\n    },\r\n    getTasks(todoListId: string) {\r\n        const promise = instance.get<GetTaskResponseType>(`todo-lists/${todoListId}/tasks`)\r\n        return promise;\r\n    },\r\n    deleteTask(todoListId: string, taskId: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${todoListId}/tasks/${taskId}`)\r\n        return promise;\r\n    },\r\n    updateTask(todoListId:string,taskId: string,model:UpdateTaskType){\r\n        const promise = instance.put<ResponseType>(`todo-lists/${todoListId}/tasks/${taskId}`, model)\r\n        return promise;\r\n    },\r\n    // createTask(title: string, todolistId: string) {\r\n    //     return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title})\r\n    // },\r\n    createTask(title:string, todoListId:string ){\r\n        debugger\r\n        const promise = instance.post<{title:string},AxiosResponse<ResponseType<{item:TaskType}>>>(`todo-lists/${todoListId}/tasks`,{title})\r\n        return promise;\r\n    }\r\n}\r\n\r\n//types\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport enum TaskStatuses{\r\n    New=0,\r\n    InProgress=1,\r\n    Completed=2,\r\n    Draft=3\r\n}\r\nexport enum TodoTaskPriorities{\r\n    Low=0,\r\n    Middle=1,\r\n    Hi=2,\r\n    Urgently=3,\r\n    Later=4\r\n}\r\ntype ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    completed: boolean\r\n    status: TaskStatuses\r\n    priority: TodoTaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\ntype GetTaskResponseType = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\nexport type UpdateTaskType = {\r\n    title?: string\r\n    description?: string\r\n    completed?: boolean\r\n    status?: number\r\n    priority?: TodoTaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {Button, IconButton, TextField} from '@material-ui/core';\r\nimport React, {ChangeEvent, KeyboardEvent, useCallback, useState} from 'react';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemForTodoListPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForTodoList=React.memo((props: AddItemForTodoListPropsType)=> {\r\n    //state\r\n    let [title, setTitle] = useState('');\r\n    let [error, setError] = useState<string | null>(null);\r\n    //обработчик события\r\n\r\n    let onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (error!== null){\r\n            setError(null)\r\n        }\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    //обработчик события\r\n    let onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.charCode === 13) {\r\n            addTask();\r\n        }\r\n    }\r\n    // callback добавления таски\r\n    let addTask =useCallback( () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title);\r\n            console.log(title)\r\n            setTitle('')\r\n        } else {\r\n            setError('No title');\r\n        }\r\n    },[title])\r\n\r\n    return <div>\r\n        <TextField variant={'outlined'}\r\n                   error={!!error} value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label={'Title'}\r\n                   helperText={error}/>\r\n        <IconButton color={'primary'} onClick={addTask}><AddBox/></IconButton>\r\n    </div>\r\n})","import React, {ChangeEvent, useCallback, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport let EditableSpan =React.memo( (props: EditableSpanType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.title);\r\n\r\n    let activateEditMode =() => {\r\n        setEditMode(true);\r\n        setTitle(props.title)\r\n    }\r\n\r\n    let activateViewMode =() => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n\r\n    let onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n\r\n    return editMode ?\r\n        <TextField variant={'outlined'} value={title} onChange={onChangeHandler} onBlur={activateViewMode} autoFocus/> :\r\n        <span onDoubleClick={activateEditMode}>{title}</span>\r\n})","import {\r\n    addTodolistAC,\r\n    changeFilterTodolistAC,\r\n    changeTitleTodolistAC,\r\n    removeTodolistAC,\r\n    setTodoListAC,\r\n} from './todolistreducer';\r\nimport {TaskStatuses, TaskType, todoListApi, UpdateTaskType} from '../API/todoList-api';\r\nimport {TasksStateType} from '../App/AppRedux';\r\nimport {Dispatch} from 'redux';\r\nimport {AppRootType} from './Store';\r\n\r\nlet initialState: TasksStateType = {}\r\n\r\nexport const taskReducer = (state: TasksStateType = initialState, action: ActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        /*let stateCopy = {...state};\r\n            let newTask = action.task\r\n            let tasks = stateCopy[newTask.todoListId];\r\n            let newTasks = [newTask, ...tasks];\r\n            stateCopy[newTask.todoListId] = newTasks;\r\n            return stateCopy*/\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id != action.taskId)}\r\n        /*{\r\n            let stateCopy = {...state};\r\n            let tasks = stateCopy[action.todolistId];\r\n            let filterTask = tasks.filter(t => t.id !== action.taskId)\r\n            stateCopy[action.todolistId] = filterTask;\r\n            return stateCopy\r\n        }*/\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state, [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        /*{\r\n        let stateCopy = {...state};\r\n        let tasks = stateCopy[action.todolistId]\r\n        stateCopy[action.todolistId] = tasks.map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n        return stateCopy\r\n    }*/\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todoList.id]: []};\r\n        case 'REMOVE-TODOLIST':\r\n            let stateCopy = {...state};\r\n            delete stateCopy[action.id];\r\n            return stateCopy;\r\n        case 'SET-TODOLIST': {\r\n            const copyState = {...state}\r\n            action.todoLists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//actionCreators\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task}) as const\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', todolistId, taskId}) as const\r\nexport const updateTaskAC = (taskId: string, model: UpdateTaskType, todolistId: string) =>\r\n    ({\r\n        type: 'UPDATE-TASK', model,\r\n        todolistId, taskId\r\n    }) as const\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', todolistId, tasks}) as const\r\n\r\n//thunkCreators\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionType>) => {\r\n    todoListApi.getTasks(todolistId)\r\n        .then(res => {\r\n            dispatch(setTasksAC(res.data.items, todolistId))\r\n        })\r\n}\r\nexport const deleteTaskTC = (todolistId: string, taskId: string) => (dispatch: Dispatch<ActionType>) => {\r\n    todoListApi.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            dispatch(removeTaskAC(taskId, todolistId))\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionType>) => {\r\n    todoListApi.createTask(title, todolistId)\r\n        .then(res => {\r\n            dispatch(addTaskAC(res.data.data.item))\r\n        })\r\n}\r\nexport const changeTaskTC = (taskId: string, domainModel: UpdateTaskType, todolistId: string) =>\r\n    (dispatch: Dispatch<ActionType>, getState: () => AppRootType) => {\r\n        const state = getState();\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId);\r\n        if (!task) {\r\n            throw new Error('task is not in the state');\r\n            console.warn('task is not in the state')\r\n            return;\r\n        }\r\n        const apiModel: UpdateTaskType = {\r\n            title: task.title,\r\n            description: task.description,\r\n            completed: (task.status === TaskStatuses.New ? false : true),\r\n            status: task.status,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            deadline: task.deadline,\r\n            ...domainModel\r\n        }\r\n        todoListApi.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                dispatch(updateTaskAC(taskId, domainModel, todolistId))\r\n            })\r\n    }\r\n\r\n//types\r\nexport type ActionType = ReturnType<typeof addTaskAC> | ReturnType<typeof removeTaskAC> |\r\n    ReturnType<typeof updateTaskAC> | ReturnType<typeof addTodolistAC> |\r\n    ReturnType<typeof removeTodolistAC> | ReturnType<typeof changeTitleTodolistAC> |\r\n    ReturnType<typeof changeFilterTodolistAC> | ReturnType<typeof setTodoListAC> | ReturnType<typeof setTasksAC>","import React, {useCallback, useEffect} from 'react';\r\nimport {AddItemForTodoList} from '../../Components/AddItemForm/AddItemForTodoList';\r\nimport {EditableSpan} from '../../Components/Editadlespan/EditableSpan';\r\nimport {Button, Checkbox, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootType} from '../../state/Store';\r\nimport {addTaskTC, changeTaskTC, deleteTaskTC, fetchTasksTC,} from '../../state/task-reducer';\r\nimport {TaskStatuses, TaskType} from '../../API/todoList-api';\r\nimport {FilterType} from '../../state/todolistreducer';\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    changeFilter: (value: FilterType, todoListId: string) => void\r\n    filter: FilterType\r\n    removeTodoList: (todoListId: string) => void\r\n    changeTodoListTitle: (title: string, id: string) => void\r\n}\r\n\r\nexport const ToDoList = React.memo((props: PropsType) => {\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.id))\r\n    }, [])\r\n\r\n    const tasks = useSelector<AppRootType, Array<TaskType>>(state => state.tasks[props.id]);\r\n    let removeTodoList = useCallback(() => {\r\n        props.removeTodoList(props.id);\r\n    }, [props.removeTodoList, props.id])\r\n    let changeToDoListTitle = useCallback((title: string) => {\r\n        props.changeTodoListTitle(title, props.id);\r\n    }, [props.changeTodoListTitle, props.id])\r\n    let tasksForToDoList = tasks;\r\n    if (props.filter === 'active') {\r\n        tasksForToDoList = tasksForToDoList.filter(t => t.status === TaskStatuses.New);\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForToDoList = tasksForToDoList.filter(t => t.status === TaskStatuses.Completed);\r\n    }\r\n   /* const removeTask = useCallback( (id)=>dispatch(deleteTaskTC(props.id, id)),\r\n     [])*/\r\n    const addTask = useCallback(function (title: string) {\r\n        dispatch(addTaskTC(title, props.id))\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div><EditableSpan title={props.title} onChange={changeToDoListTitle}/> <IconButton\r\n                onClick={removeTodoList}><Delete/></IconButton></div>\r\n            <AddItemForTodoList addItem={addTask}/>\r\n            <div>\r\n                {\r\n                    tasksForToDoList.map(t => {\r\n                        let onChangeTitleHandler = (title: string) => {\r\n                            dispatch(changeTaskTC(t.id, {title}, props.id))\r\n                        }\r\n                        return <div className={t.status === TaskStatuses.Completed ? 'is-Done' : ''} key={t.id}>\r\n                            <Checkbox onChange={(e) => {\r\n                                let newStatus = e.currentTarget.checked;\r\n                                dispatch(changeTaskTC(t.id, {status: newStatus ? TaskStatuses.Completed : TaskStatuses.New}, props.id))\r\n                            }}\r\n                                      color={'primary'}\r\n                                      checked={t.status === TaskStatuses.Completed}/>\r\n                            <EditableSpan title={t.title} onChange={onChangeTitleHandler}/>\r\n                            <IconButton onClick={()=>{dispatch(deleteTaskTC(props.id, t.id))}}><Delete/></IconButton></div>\r\n                    })\r\n                }\r\n            </div>\r\n            <Button color={'inherit'} variant={props.filter === 'all' ? 'outlined' : 'text'} onClick={() => {\r\n                props.changeFilter('all', props.id)\r\n            }}>All</Button>\r\n            <Button color={'primary'} variant={props.filter === 'active' ? 'outlined' : 'text'} onClick={() => {\r\n                props.changeFilter('active', props.id)\r\n            }}>Active</Button>\r\n            <Button color={'secondary'} variant={props.filter === 'completed' ? 'outlined' : 'text'} onClick={() => {\r\n                props.changeFilter('completed', props.id)\r\n            }}>Completed</Button>\r\n        </div>\r\n    )\r\n})\r\n\r\n","import {ActionType} from './task-reducer';\r\nimport {todoListApi, TodoListType} from '../API/todoList-api';\r\nimport {Dispatch} from 'redux';\r\n\r\nlet initialState: Array<TodoListDomainType> = []\r\n\r\nexport const todolistReducer = (state: Array<TodoListDomainType> = initialState, action: ActionType): Array<TodoListDomainType> => {\r\n    switch (action.type) {\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todoList, filter: 'all'}, ...state]\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(t => t.id !== action.id);\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'SET-TODOLIST':\r\n            return action.todoLists.map(tl => ({...tl, filter: 'all'}));\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//actionCreators\r\nexport const addTodolistAC = (todoList: TodoListType) =>\r\n    ({type: 'ADD-TODOLIST', todoList}) as const\r\nexport const removeTodolistAC = (id: string) =>\r\n    ({type: 'REMOVE-TODOLIST', id}) as const\r\nexport const changeTitleTodolistAC = (title: string, id: string) =>\r\n    ({type: 'CHANGE-TODOLIST-TITLE', title, id}) as const\r\nexport const changeFilterTodolistAC = (filter: FilterType, id: string) =>\r\n    ({type: 'CHANGE-TODOLIST-FILTER', filter, id}) as const\r\nexport const setTodoListAC = (todoLists: Array<TodoListType>) =>\r\n    ({type: 'SET-TODOLIST', todoLists}) as const\r\n\r\n//thunkCreators\r\nexport const fetchTodoListsTC = () => (dispatch: Dispatch<ActionType>) => {\r\n    todoListApi.getTodolist()\r\n        .then(res => {\r\n            dispatch(setTodoListAC(res.data))\r\n        })\r\n}\r\nexport const removeTodoListsTC = (todoListId: string) => (dispatch: Dispatch<ActionType>) => {\r\n    todoListApi.deleteTodoList(todoListId)\r\n        .then(res => {\r\n            dispatch(removeTodolistAC(todoListId))\r\n        })\r\n}\r\nexport const addTodoListsTC = (title: string) => (dispatch: Dispatch<ActionType>) => {\r\n    todoListApi.createTodolist(title)\r\n        .then(res => {\r\n            dispatch(addTodolistAC(res.data.data.item))\r\n        })\r\n}\r\nexport const changeTodoListTitleTC = (newTitle: string, id: string) => (dispatch: Dispatch<ActionType>) => {\r\n    todoListApi.updateTodoList(newTitle, id)\r\n        .then(res => {\r\n            dispatch(changeTitleTodolistAC(newTitle, id))\r\n        })\r\n}\r\n\r\n//types\r\nexport type FilterType = 'all' | 'active' | 'completed'\r\nexport type TodoListDomainType = TodoListType & {\r\n    filter: FilterType\r\n}\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {ToDoList} from '../features/TodoLists/ToDoList';\r\nimport {AddItemForTodoList} from '../Components/AddItemForm/AddItemForTodoList';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n     addTodoListsTC,\r\n    changeFilterTodolistAC,\r\n     changeTodoListTitleTC, fetchTodoListsTC, FilterType,\r\n    removeTodoListsTC, TodoListDomainType\r\n} from '../state/todolistreducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootType} from '../state/Store';\r\nimport {TaskType} from '../API/todoList-api';\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction AppRedux() {\r\n//state\r\n    const dispatch = useDispatch();\r\n    const todoLists = useSelector<AppRootType, Array<TodoListDomainType>>(state => state.todolists);\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTodoListsTC())\r\n           },[]\r\n    )\r\n//фильтрация тасок\r\n    let changeFilter = useCallback((value: FilterType, todoListId: string) => {\r\n        let action = changeFilterTodolistAC(value, todoListId);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n    //удаление тудулиста\r\n    let removeTodoList = useCallback((todoListId: string) => {\r\n        dispatch( removeTodoListsTC(todoListId));\r\n    }, [dispatch])\r\n    //изменение название тудулиста\r\n    let changeTodoListTitle = useCallback((id: string, title: string) => {\r\n        dispatch(changeTodoListTitleTC(title, id));\r\n    }, [dispatch])\r\n    //дабавление тудулиста\r\n    let addTodoList = useCallback((title: string) => {\r\n        dispatch(addTodoListsTC(title));\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position={'static'}>\r\n                <Toolbar>\r\n                    <IconButton edge={'start'} color={'inherit'} area-label={'menu'}>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant={'h6'}>\r\n                        News\r\n                    </Typography>\r\n                    <Button color={'inherit'}>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px'}}>\r\n                    <AddItemForTodoList addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todoLists.map(tl => {\r\n                        return <Grid item>\r\n                            <Paper style={{padding: '10px'}}>\r\n                                <ToDoList\r\n                                    key={tl.id}\r\n                                    id={tl.id}\r\n                                    title={tl.title}\r\n                                    changeFilter={changeFilter}\r\n                                    filter={tl.filter}\r\n                                    removeTodoList={removeTodoList}\r\n                                    changeTodoListTitle={changeTodoListTitle}\r\n                                /></Paper>\r\n                        </Grid>\r\n                    })}</Grid>\r\n            </Container>\r\n        </div>)\r\n}\r\n\r\nexport default AppRedux;\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {todolistReducer} from './todolistreducer';\r\nimport {taskReducer} from './task-reducer';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nexport type AppRootType=ReturnType<typeof rootReducer>\r\nlet rootReducer=combineReducers({\r\n    todolists:todolistReducer,\r\n    tasks:taskReducer\r\n})\r\nexport let store=createStore(rootReducer,applyMiddleware(thunkMiddleware));\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport AppRedux from './App/AppRedux';\nimport {Provider} from 'react-redux';\nimport {store} from './state/Store';\n\n\nReactDOM.render(\n    <Provider store={store}>\n    <AppRedux/>\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}