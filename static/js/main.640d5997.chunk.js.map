{"version":3,"sources":["AddItemForTodoList.tsx","EditableSpan.tsx","ToDoList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AddItemForTodoList","props","useState","title","setTitle","error","setError","addTask","trim","addItem","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","onBlur","autoFocus","onDoubleClick","ToDoList","onChangeTitleHandler","changeTaskTitle","id","changeTodoListTitle","removeTodoList","Delete","tasks","map","t","className","isDone","Checkbox","newStatus","checked","changeTaskStatus","onChangeStatus","removeTask","Button","filter","changeFilter","App","todoListId1","v1","todoListId2","tasksObj","setTasks","todoListId","filteredTasks","task","newTask","todoList","todoLists","find","setTodoLists","changeTasTitle","newValue","rightTodoLists","AppBar","position","Toolbar","edge","area-label","Menu","Typography","Container","fixed","Grid","container","style","padding","spacing","tl","tasksForToDoList","item","Paper","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.640d5997.chunk.js","sourcesContent":["import {Button, IconButton, TextField} from '@material-ui/core';\r\nimport React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemForTodoListPropsType={\r\n    addItem:(title:string)=>void\r\n}\r\nexport function AddItemForTodoList(props:AddItemForTodoListPropsType){\r\n    let [title,setTitle]=useState('');\r\n    let [error,setError]=useState<string|null>(null);\r\n    let onChangeHandler=(e:ChangeEvent<HTMLInputElement>)=>{setError(null); setTitle(e.currentTarget.value)};\r\n    let onKeyPressHandler=(e:KeyboardEvent<HTMLInputElement>)=>{if(e.charCode===13){addTask();}};\r\n    let addTask=()=>{\r\n        if(title.trim()!==''){\r\n            props.addItem(title.trim());\r\n            setTitle('')\r\n        }else {\r\n            setError('No title');\r\n        }\r\n\r\n    }\r\n\r\n    return<div>\r\n        <TextField variant={'outlined'}\r\n            error={!!error} value={title}\r\n                   onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n        label={\"Title\"}\r\n        helperText={error}/>\r\n        <IconButton    color={'primary'} onClick={addTask}><AddBox/></IconButton>\r\n\r\n    </div>\r\n}","import {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanType={\r\n    title:string\r\n    onChange:(newValue:string)=>void\r\n}\r\nexport let EditableSpan=(props:EditableSpanType)=>{\r\n    let [editMode,setEditMode]=useState(false);\r\n    let [title,setTitle]=useState('');\r\n    let activateEditMode=()=>{setEditMode(true);\r\n        setTitle(props.title)}\r\n    let activateViewMode=()=>{setEditMode(false);\r\n        props.onChange(title);}\r\n    let onChangeHandler=(e:ChangeEvent<HTMLInputElement>)=>setTitle(e.currentTarget.value)\r\n\r\n\r\n    return editMode?<TextField variant={'outlined'} value={title} onChange={onChangeHandler} onBlur={activateViewMode} autoFocus />:\r\n    <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n\r\n}","import React, {ChangeEvent,KeyboardEvent, useState} from 'react';\r\nimport {FilterType} from './App';\r\nimport {AddItemForTodoList} from './AddItemForTodoList';\r\nimport {EditableSpan} from './EditableSpan';\r\nimport {Button, Checkbox, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\n\r\ntype PropsType={\r\n    id:string\r\n    title:string\r\n    tasks:Array<TaskType>\r\n    removeTask:(id:string,todoListId:string)=>void\r\n    changeFilter:(value:FilterType,todoListId:string)=>void\r\n    addTask:(title:string,todoListId:string)=>void,\r\n    changeTaskStatus:(id:string,isDone:boolean,todoListId:string)=>void\r\n    changeTaskTitle:(id:string,newValue:string,todoListId:string)=>void\r\n    filter:FilterType\r\n    removeTodoList:(todoListId:string)=>void\r\n    changeTodoListTitle:(title:string,id:string)=>void\r\n}\r\n export type TaskType={\r\n    id:string\r\n    title:string\r\n    isDone:boolean\r\n}\r\n\r\n\r\n\r\nexport const ToDoList=(props:PropsType)=>{\r\n\r\n    let addTask=(title:string)=>{\r\n        props.addTask(props.title,props.id)\r\n    }\r\n\r\n    let onChangeStatus= (t: TaskType, e:ChangeEvent<HTMLInputElement>) => {\r\n        let newStatus=e.currentTarget.checked;\r\n        props.changeTaskStatus(t.id,newStatus,props.id);\r\n    }\r\n\r\n    let removeTodoList=()=>{\r\n        props.removeTodoList(props.id);\r\n    }\r\n    let changeToDoListTitle=(title:string)=>{\r\n        props.changeTodoListTitle(props.id,title);\r\n\r\n    }\r\n    let onChangeTitleHandler= (title:string) => {\r\n        props.changeTaskTitle(props.id,title,props.id);\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <div><EditableSpan title={props.title} onChange={ changeToDoListTitle}/> <IconButton onClick={removeTodoList}><Delete/></IconButton></div>\r\n            <AddItemForTodoList   addItem={addTask} />\r\n            <div>\r\n                {\r\n                    props.tasks.map(t=><div className={t.isDone?'is-Done':''} key={t.id}><Checkbox onChange={(e) => onChangeStatus(t, e)} color={'primary'} checked={t.isDone}/>\r\n                        <EditableSpan title={t.title} onChange={onChangeTitleHandler}/>\r\n                    <IconButton onClick={()=>{props.removeTask(t.id, props.id)}}><Delete/></IconButton></div>)\r\n                }\r\n            </div>\r\n            <Button color={'inherit'} variant={props.filter==='all'?'outlined':'text'} onClick={()=>{props.changeFilter('all',props.id )}}>All</Button>\r\n            <Button  color={'primary'} variant={props.filter==='active'?'outlined':'text'} onClick={()=>{props.changeFilter('active',props.id)}}>Active</Button>\r\n            <Button  color={'secondary'} variant={props.filter==='completed'?'outlined':'text'} onClick={()=>{props.changeFilter('completed',props.id)}}>Completed</Button>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {useState} from 'react';\nimport {v1} from 'uuid';\nimport './App.css';\nimport {ToDoList} from './ToDoList';\nimport {AddItemForTodoList} from './AddItemForTodoList';\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\nimport {Menu} from '@material-ui/icons';\n\nexport type FilterType = 'all' | 'active' | 'completed'\ntype TodoType = {\n    id: string\n    title: string\n    filter: FilterType\n}\ntype TasksType = {\n    [key: string]: Array<TaskType>\n}\ntype TaskType = {\n    id: string\n    title: string\n    isDone: boolean\n}\n\nfunction App() {\n//state\n    let todoListId1 = v1();\n    let todoListId2 = v1();\n\n    let [tasksObj, setTasks] = useState<TasksType>({\n        [todoListId1]: [{id: v1(), title: 'HTML', isDone: true},\n            {id: v1(), title: 'CSS', isDone: false},\n            {id: v1(), title: 'React', isDone: false}],\n        [todoListId2]: [{id: v1(), title: 'You', isDone: true},\n            {id: v1(), title: 'Cook', isDone: false},\n            {id: v1(), title: 'React', isDone: false}]\n    });\n\n//удаление таски\n    function removeTask(id: string, todoListId: string) {\n        let tasks = tasksObj[todoListId];\n        let filteredTasks = tasks.filter(t => t.id !== id)\n        tasksObj[todoListId] = filteredTasks;\n        setTasks({...tasksObj});\n    }\n\n//добавление таски\n    function addTask(title: string, todoListId: string) {\n        let task = {id: v1(), title: title, isDone: false};\n        let tasks = tasksObj[todoListId];\n        let newTask = [task, ...tasks];\n        tasksObj[todoListId] = newTask;\n        setTasks({...tasksObj});\n    }\n\n//фильтрация тасок\n    function changeFilter(value: FilterType, todoListId: string) {\n        let todoList = todoLists.find(t => t.id === todoListId);\n        if (todoList) {\n            todoList.filter = value;\n            setTodoLists([...todoLists]);\n        }\n    }\n\n\n//изменение статуса таски\n    function changeTaskStatus(id: string, isDone: boolean, todoListId: string) {\n        let tasks = tasksObj[todoListId];\n        let task = tasks.filter(t => t.id === id);\n        if (task) {\n            task[0].isDone = isDone;\n            setTasks({...tasksObj});\n        }\n    }\n\n    function changeTasTitle(id: string, newValue: string, todoListId: string) {\n        let tasks = tasksObj[todoListId];\n        let task = tasks.filter(t => t.id === id);\n        if (task) {\n            task[0].title = newValue;\n            setTasks({...tasksObj});\n        }\n    }\n\n    //удаление тудулиста\n    function removeTodoList(todoListId: string) {\n        let rightTodoLists = todoLists.filter(t => t.id != todoListId)\n        setTodoLists(rightTodoLists);\n        delete tasksObj[todoListId];\n        setTasks({...tasksObj})\n\n    }\n\n    function changeTodoListTitle(id: string, title: string) {\n        const todoList = todoLists.find(t => t.id != id)\n        if (todoList) {\n            todoList.title = title\n            setTodoLists([...todoLists])\n        }\n    }\n\n    let [todoLists, setTodoLists] = useState<Array<TodoType>>(\n        [{id: todoListId1, title: 'What to bye', filter: 'all'},\n            {id: todoListId2, title: 'What to read', filter: 'all'}])\n\n    function addTodoList(title: string) {\n        let todoList: TodoType = {id: v1(), title: title, filter: 'all'};\n        setTodoLists([todoList, ...todoLists]);\n        setTasks({...tasksObj, [todoList.id]: []})\n    }\n\n\n    return (\n        <div className=\"App\">\n            <AppBar position={'static'}>\n                <Toolbar>\n                    <IconButton edge={'start'} color={'inherit'} area-label={'menu'}>\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant={'h6'}>\n                        News\n                    </Typography>\n                    <Button color={'inherit'}>Login</Button>\n                </Toolbar>\n            </AppBar>\n            <Container fixed>\n                <Grid container style={{padding:'20px'}}>\n                    <AddItemForTodoList addItem={addTodoList}/>\n                </Grid>\n                <Grid container spacing={3}>\n                    {todoLists.map(tl => {\n                        let tasksForToDoList = tasksObj[tl.id];\n                        if (tl.filter === 'active') {\n                            tasksForToDoList = tasksForToDoList.filter(t => t.isDone === false);\n                        }\n                        if (tl.filter === 'completed') {\n                            tasksForToDoList = tasksForToDoList.filter(t => t.isDone === true);\n                        }\n\n                        return <Grid item>\n                            <Paper style={{padding: '10px'}}>\n                                <ToDoList\n                                    key={tl.id}\n                                    id={tl.id}\n                                    title={tl.title}\n                                    tasks={tasksForToDoList}\n                                    removeTask={removeTask}\n                                    changeFilter={changeFilter}\n                                    addTask={addTask}\n                                    filter={tl.filter}\n                                    changeTaskStatus={changeTaskStatus}\n                                    removeTodoList={removeTodoList}\n                                    changeTaskTitle={changeTasTitle}\n                                    changeTodoListTitle={changeTodoListTitle}\n                                /></Paper>\n                        </Grid>\n                    })}</Grid>\n            </Container>\n        </div>)\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}