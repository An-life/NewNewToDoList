{"version":3,"sources":["reportWebVitals.ts","AddItemForTodoList.tsx","EditableSpan.tsx","state/task-reducer.ts","ToDoList.tsx","state/todolistreducer.ts","AppRedux.tsx","state/Store.ts","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddItemForTodoList","props","useState","title","setTitle","error","setError","addTask","console","log","trim","addItem","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","onBlur","autoFocus","onDoubleClick","initialState","ToDoList","dispatch","useDispatch","tasksForToDoList","useSelector","state","tasks","id","filter","t","isDone","changeTodoListTitle","removeTodoList","Delete","todolistId","type","addTaskAC","map","className","Checkbox","taskId","newStatus","checked","changeTaskTitletAC","Button","changeFilter","AppRedux","todolists","todoListId","action","newTitle","changeTitleTodolistAC","AppBar","position","Toolbar","edge","area-label","Menu","Typography","Container","fixed","Grid","container","style","padding","v1","addTodolistAC","spacing","tl","item","Paper","rootReducer","combineReducers","todoList","rightTodoLists","find","stateCopy","newTask","newTasks","filterTask","task","store","createStore","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.12d1484a.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {Button, IconButton, TextField} from '@material-ui/core';\r\nimport React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemForTodoListPropsType={\r\n    addItem:(title:string)=>void\r\n}\r\nexport function AddItemForTodoList(props:AddItemForTodoListPropsType){\r\n    let [title,setTitle]=useState('');\r\n    let [error,setError]=useState<string|null>(null);\r\n    let onChangeHandler=(e:ChangeEvent<HTMLInputElement>)=>{setError(null); setTitle(e.currentTarget.value)};\r\n    let onKeyPressHandler=(e:KeyboardEvent<HTMLInputElement>)=>{if(e.charCode===13){addTask();}};\r\n    let addTask=()=>{\r\n        console.log(title);\r\n        if(title.trim()!==''){\r\n            props.addItem(title.trim());\r\n            setTitle('')\r\n        }else {\r\n            setError('No title');\r\n        }\r\n\r\n    }\r\n\r\n    return<div>\r\n        <TextField variant={'outlined'}\r\n            error={!!error} value={title}\r\n                   onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n        label={\"Title\"}\r\n        helperText={error}/>\r\n        <IconButton    color={'primary'} onClick={addTask}><AddBox/></IconButton>\r\n\r\n    </div>\r\n}","import {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanType={\r\n    title:string\r\n    onChange:(newValue:string)=>void\r\n}\r\nexport let EditableSpan=(props:EditableSpanType)=>{\r\n    let [editMode,setEditMode]=useState(false);\r\n    let [title,setTitle]=useState(props.title);\r\n    let activateEditMode=()=>{setEditMode(true);\r\n        setTitle(props.title)}\r\n    let activateViewMode=()=>{setEditMode(false);\r\n        props.onChange(title);}\r\n    let onChangeHandler=(e:ChangeEvent<HTMLInputElement>)=>setTitle(e.currentTarget.value)\r\n\r\n\r\n    return editMode?<TextField variant={'outlined'} value={title} onChange={onChangeHandler} onBlur={activateViewMode} autoFocus />:\r\n    <span onDoubleClick={activateEditMode}>{title}</span>\r\n\r\n}","\r\nimport {v1} from 'uuid';\r\nimport {\r\n    AddTodolistType,\r\n    ChangeFilterTodolistType,\r\n    ChangeTitleTodolistType,\r\n    RemoveTodolistType\r\n} from './todolistreducer';\r\nimport {TasksType} from '../AppRedux';\r\n\r\n\r\n type  AddTaskType = {\r\n    type: 'ADD-TASK'\r\n    title: string\r\n    todolistId:string\r\n}\r\ntype RemoveTaskType={\r\n    type: 'REMOVE-TASK'\r\n    taskId: string\r\n    todolistId:string\r\n\r\n}\r\ntype ChangeTaskTitleType={\r\n    type: 'CHANGE-TASK-TITLE'\r\n    title:string\r\n    taskId: string\r\n    todolistId:string}\r\n\r\ntype  ChangeTaskStatusType={\r\n    type: 'CHANGE-TASK-STATUS'\r\n    isDone:boolean\r\n    taskId: string\r\n    todolistId:string\r\n}\r\n\r\n export type ActionType =AddTaskType|RemoveTaskType| ChangeTaskTitleType|ChangeTaskStatusType| AddTodolistType|\r\n    RemoveTodolistType|ChangeTitleTodolistType|ChangeFilterTodolistType\r\n\r\nlet initialState:TasksType={\r\n\r\n}\r\nexport const taskReducer=(state:TasksType=initialState , action: ActionType): TasksType => {\r\n    switch (action.type) {\r\n        case 'ADD-TASK':{\r\n            let stateCopy={...state};\r\n            let newTask={id: v1(), title:action.title, isDone: false};\r\n            let tasks = stateCopy[action.todolistId];\r\n            let newTasks = [newTask, ...tasks];\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy}\r\n        case 'REMOVE-TASK':{\r\n            let stateCopy={...state};\r\n            let tasks = stateCopy[action.todolistId];\r\n            let filterTask=tasks.filter(t=>t.id!=action.taskId)\r\n            stateCopy[action.todolistId] =filterTask ;\r\n            return stateCopy}\r\n        case 'CHANGE-TASK-TITLE':{\r\n            let stateCopy={...state};\r\n            let task=stateCopy[action.todolistId].find(t=>t.id===action.taskId)\r\n            if(task){\r\n                task.title=action.title\r\n            }return stateCopy\r\n        }\r\n        case 'CHANGE-TASK-STATUS':{\r\n            let stateCopy={...state};\r\n            let tasks=stateCopy[action.todolistId]\r\n            stateCopy[action.todolistId]=tasks.map(t=>t.id===action.taskId?{...t,isDone: action.isDone}:t)\r\n            return stateCopy\r\n        }\r\n        case 'ADD-TODOLIST':{\r\n            let stateCopy={...state};\r\n            stateCopy[action.todolistId]=[];\r\n            return stateCopy;\r\n        }\r\n        case 'REMOVE-TODOLIST':{\r\n            let stateCopy={...state};\r\n            delete stateCopy[action.id];\r\n            return stateCopy;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport const addTaskAC= (title: string,todolistId:string): AddTaskType => {\r\n    return {type: 'ADD-TASK' , title,todolistId}\r\n}\r\nexport const removeTaskAC= (taskId: string,todolistId:string ): RemoveTaskType => {\r\n    return {type: 'REMOVE-TASK' ,todolistId,taskId}\r\n}\r\nexport const changeTaskTitletAC=(title:string,taskId: string, todolistId:string):ChangeTaskTitleType=>{\r\n    return {type: 'CHANGE-TASK-TITLE' ,title,taskId,todolistId }\r\n}\r\nexport const changeTaskStatusAC=(isDone:boolean,taskId: string,todolistId:string):ChangeTaskStatusType=>{\r\n    return {type: 'CHANGE-TASK-STATUS' ,isDone,taskId,todolistId}\r\n}","import React, {ChangeEvent,KeyboardEvent, useState} from 'react';\r\nimport {AddItemForTodoList} from './AddItemForTodoList';\r\nimport {EditableSpan} from './EditableSpan';\r\nimport {Button, Checkbox, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootType} from './state/Store';\r\nimport {FilterType, TasksType} from './AppRedux';\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitletAC, removeTaskAC} from './state/task-reducer';\r\n\r\ntype PropsType={\r\n    id:string\r\n    title:string\r\n    changeFilter:(value:FilterType,todoListId:string)=>void\r\n    filter:FilterType\r\n    removeTodoList:(todoListId:string)=>void\r\n    changeTodoListTitle:(title:string,id:string)=>void\r\n}\r\n export type TaskType={\r\n    id:string\r\n    title:string\r\n    isDone:boolean\r\n}\r\n\r\n\r\n\r\nexport const ToDoList=(props:PropsType)=>{\r\n    const dispatch=useDispatch();\r\n    const tasks=useSelector<AppRootType,Array<TaskType>>(state=>state.tasks[props.id]);\r\n\r\n\r\n    let removeTodoList=()=>{\r\n        props.removeTodoList(props.id);\r\n    }\r\n    let changeToDoListTitle=(title:string)=>{\r\n        props.changeTodoListTitle(title,props.id);\r\n    }\r\n    let tasksForToDoList = tasks;\r\n    if (props.filter === 'active') {\r\n        tasksForToDoList = tasksForToDoList.filter(t => t.isDone === false);\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForToDoList = tasksForToDoList.filter(t => t.isDone === true);\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <div><EditableSpan title={props.title} onChange={ changeToDoListTitle}/> <IconButton onClick={removeTodoList}><Delete/></IconButton></div>\r\n            <AddItemForTodoList   addItem={(title)=>{ dispatch(addTaskAC(title, props.id));}} />\r\n            <div>\r\n                {\r\n                    tasksForToDoList.map(t=>{\r\n                        let onChangeTitleHandler= (title:string) => {\r\n                            dispatch(changeTaskTitletAC(t.id,title,props.id))\r\n                        }\r\n                        return <div className={t.isDone?'is-Done':''} key={t.id}><Checkbox onChange={(e) =>{  let newStatus=e.currentTarget.checked;\r\n                            dispatch(changeTaskStatusAC(newStatus, t.id, props.id))}}\r\n                            color={'primary'} checked={t.isDone}/>\r\n                        <EditableSpan title={t.title} onChange={onChangeTitleHandler}/>\r\n                    <IconButton onClick={()=>{ dispatch(removeTaskAC(t.id, props.id) )}}><Delete/></IconButton></div>})\r\n                }\r\n            </div>\r\n            <Button color={'inherit'} variant={props.filter==='all'?'outlined':'text'} onClick={()=>{props.changeFilter('all',props.id )}}>All</Button>\r\n            <Button  color={'primary'} variant={props.filter==='active'?'outlined':'text'} onClick={()=>{props.changeFilter('active',props.id)}}>Active</Button>\r\n            <Button  color={'secondary'} variant={props.filter==='completed'?'outlined':'text'} onClick={()=>{props.changeFilter('completed',props.id)}}>Completed</Button>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","\r\nimport {v1} from 'uuid';\r\nimport {ActionType} from './task-reducer';\r\nimport {FilterType, TodoType} from '../AppRedux';\r\n\r\n\r\n\r\nexport type  AddTodolistType = {\r\n    type: 'ADD-TODOLIST'\r\n    title: string\r\n    todolistId:string\r\n}\r\n export type RemoveTodolistType={\r\n    type: 'REMOVE-TODOLIST'\r\n    id: string\r\n}\r\n export type ChangeTitleTodolistType={\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    title:string\r\n    id: string\r\n}\r\nexport type  ChangeFilterTodolistType={\r\n    type: 'CHANGE-TODOLIST-FILTER'\r\n    filter:FilterType\r\n    id: string\r\n}\r\n\r\n\r\n\r\nlet initialState:Array<TodoType>=[]\r\n\r\nexport const todolistReducer=(state: Array<TodoType>=initialState, action: ActionType): Array<TodoType> => {\r\n    switch (action.type) {\r\n        case 'ADD-TODOLIST':\r\n        {let todoList: TodoType = {id: action.todolistId, title: action.title, filter: 'all'};\r\n            return [ todoList,...state]}\r\n        case 'REMOVE-TODOLIST':{\r\n            let rightTodoLists = state.filter(t => t.id != action.id)\r\n           return rightTodoLists;\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE':{\r\n            const todoList = state.find(t => t.id === action.id)\r\n            if (todoList) {\r\n                todoList.title = action.title\r\n            } return [...state];\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER':{\r\n            const todoList = state.find(t => t.id === action.id)\r\n            if (todoList) {\r\n                todoList.filter = action.filter\r\n            } return [...state];\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport const addTodolistAC= (title: string): AddTodolistType => {\r\n    return {type: 'ADD-TODOLIST' , title: title,todolistId:v1()}\r\n}\r\nexport const removeTodolistAC= (id: string): RemoveTodolistType => {\r\n    return {type: 'REMOVE-TODOLIST' , id:id}\r\n}\r\nexport const changeTitleTodolistAC=(newTitle:string,id:string):ChangeTitleTodolistType=>{\r\n    return {type: 'CHANGE-TODOLIST-TITLE' ,title:newTitle, id:id}\r\n}\r\nexport const changeFilterTodolistAC=(filter:FilterType,id:string):ChangeFilterTodolistType=>{\r\n    return {type: 'CHANGE-TODOLIST-FILTER' ,filter:filter, id:id}\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {ToDoList} from './ToDoList';\r\nimport {AddItemForTodoList} from './AddItemForTodoList';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n    addTodolistAC,\r\n    changeFilterTodolistAC,\r\n    changeTitleTodolistAC,\r\n    removeTodolistAC\r\n} from './state/todolistreducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootType} from './state/Store';\r\n\r\nexport type FilterType = 'all' | 'active' | 'completed'\r\nexport type TodoType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterType\r\n}\r\nexport type TasksType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nfunction AppRedux() {\r\n//state\r\n   const dispatch=useDispatch();\r\n   const todolists=useSelector<AppRootType,Array<TodoType>>(state=>state.todolists);\r\n\r\n\r\n\r\n//фильтрация тасок\r\n    function changeFilter(value: FilterType, todoListId: string) {\r\n        let action = changeFilterTodolistAC(value, todoListId);\r\n        dispatch(action);\r\n    }\r\n    //удаление тудулиста\r\n    function removeTodoList(todoListId: string) {\r\n        let action = removeTodolistAC(todoListId);\r\n        dispatch(action);\r\n    }\r\n\r\n    function changeTodoListTitle(id: string, title: string) {\r\n        let action = changeTitleTodolistAC(id, title);\r\n        dispatch(action);\r\n    }\r\n\r\n    function addTodoList(title: string) {\r\n        let action = addTodolistAC(title);\r\n        dispatch(action);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position={'static'}>\r\n                <Toolbar>\r\n                    <IconButton edge={'start'} color={'inherit'} area-label={'menu'}>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant={'h6'}>\r\n                        News\r\n                    </Typography>\r\n                    <Button color={'inherit'}>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px'}}>\r\n                    <AddItemForTodoList addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todolists.map(tl => {\r\n                        return <Grid item>\r\n                            <Paper style={{padding: '10px'}}>\r\n                                <ToDoList\r\n                                    key={tl.id}\r\n                                    id={tl.id}\r\n                                    title={tl.title}\r\n                                    changeFilter={changeFilter}\r\n                                    filter={tl.filter}\r\n                                    removeTodoList={removeTodoList}\r\n                                    changeTodoListTitle={changeTodoListTitle}\r\n                                /></Paper>\r\n                        </Grid>\r\n                    })}</Grid>\r\n            </Container>\r\n        </div>)\r\n}\r\n\r\nexport default AppRedux;\r\n","import {combineReducers, createStore} from 'redux';\r\nimport {todolistReducer} from './todolistreducer';\r\nimport {taskReducer} from './task-reducer';\r\n\r\nexport type AppRootType=ReturnType<typeof rootReducer>\r\nlet rootReducer=combineReducers({\r\n    todolists:todolistReducer,\r\n    tasks:taskReducer\r\n})\r\nexport let store=createStore(rootReducer);\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport AppRedux from './AppRedux';\nimport {Provider} from 'react-redux';\nimport {store} from './state/Store';\n\n\nReactDOM.render(\n    <Provider store={store}>\n    <AppRedux/></Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}