{"version":3,"sources":["ToDoList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ToDoList","props","useState","title","setTitle","error","setError","addTask","trim","className","value","onChange","e","currentTarget","onKeyPress","charCode","onClick","tasks","map","t","isDone","newStatus","checked","changeTaskStatus","id","onChangeStatus","type","removeTask","filter","changeFilter","App","v1","setTasks","setFilter","tasksForToDoList","console","log","newTask","task","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dff86ea4.chunk.js","sourcesContent":["import React, {ChangeEvent,KeyboardEvent, useState} from 'react';\r\nimport {FilterType} from './App';\r\n\r\ntype PropsType={\r\n    title:string\r\n    tasks:Array<TaskType>\r\n    removeTask:(id:string)=>void\r\n    changeFilter:(value:FilterType)=>void\r\n    addTask:(title:string)=>void,\r\n    changeTaskStatus:(id:string,isDone:boolean)=>void\r\n    filter:FilterType\r\n}\r\n export type TaskType={\r\n    id:string\r\n    title:string\r\n    isDone:boolean\r\n}\r\nexport const ToDoList=(props:PropsType)=>{\r\n    let [title,setTitle]=useState('');\r\n\r\n    let [error,setError]=useState<string|null>(null);\r\n\r\n    let addTask=()=>{\r\n        if(title.trim()!==''){\r\n            props.addTask(title);\r\n            setTitle('')\r\n        }else {\r\n            setError('No title');\r\n        }\r\n\r\n    }\r\n\r\n    let onChangeHandler=(e:ChangeEvent<HTMLInputElement>)=>{setError(null); setTitle(e.currentTarget.value)};\r\n    let onKeyPressHandler=(e:KeyboardEvent<HTMLInputElement>)=>{if(e.charCode===13){addTask();}};\r\n    let onChangeStatus= (t: TaskType, e:ChangeEvent<HTMLInputElement>) => {\r\n        let newStatus=e.currentTarget.checked;\r\n        props.changeTaskStatus(t.id,newStatus);\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <div>{props.title}</div>\r\n            <div>\r\n                <input  className={error?'error':''} value={title} onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}/>\r\n                <button onClick={addTask}>+</button>\r\n                {error&&<div className={'error-message'}>{error}</div> }\r\n            </div>\r\n            <ul>\r\n                {\r\n                    props.tasks.map(t=><li className={t.isDone?'is-Done':''} key={t.id}><input onChange={(e) => onChangeStatus(t, e)} type=\"checkbox\" checked={t.isDone}/><span>{t.title}</span>\r\n                    <button onClick={()=>{props.removeTask(t.id)}}>x</button></li>)\r\n                }\r\n            </ul>\r\n            <button className={props.filter==='all'?'is-active':''} onClick={()=>{props.changeFilter('all')}}>All</button>\r\n            <button  className={props.filter==='active'?'is-active':''} onClick={()=>{props.changeFilter('active')}}>Active</button>\r\n            <button  className={props.filter==='completed'?'is-active':''} onClick={()=>{props.changeFilter('completed')}}>Completed</button>\r\n\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\nimport { v1 } from 'uuid';\nimport './App.css';\nimport {ToDoList} from './ToDoList';\n\nexport type FilterType = 'all' | 'active' | 'completed'\n\n\nfunction App() {\n//state\n    let [tasks, setTasks] = useState([\n        {id:v1() , title: 'HTML', isDone: true},\n        {id:v1() , title: 'CSS', isDone: false},\n        {id:v1() , title: 'React', isDone: false}\n    ])\n//удаление таски\n    function removeTask(id: string) {\n        tasks = tasks.filter(t => t.id !== id)\n        setTasks(tasks)\n    }\n//добавление таски\n    function addTask(title:string) {\n        let task={id:v1(),title:title,isDone:false}\n         let newTask=[task,...tasks];\n        setTasks(newTask);\n    }\n//фильтрация тасок\n    let [filter, setFilter] = useState<FilterType>('all');\n    let tasksForToDoList = tasks;\n    if (filter === 'active') {\n        tasksForToDoList = tasks.filter(t => t.isDone === false);\n    }\n    if (filter === 'completed') {\n        tasksForToDoList = tasks.filter(t => t.isDone === true);\n    }\n\n    function changeFilter(value: FilterType) {\n        setFilter(value);\n    }\n//изменение статуса таски\n    function changeTaskStatus(id:string,isDone:boolean) {\n        let task=tasks.filter(t=>t.id===id);\n        if (task){\n            console.log(task)\n             task[0].isDone=isDone;\n            setTasks([...tasks]);\n        }\n    }\n\n    console.log(v1())\n    return (\n        <div className=\"App\">\n            <ToDoList title=\"What to learn\" tasks={tasksForToDoList}\n                      removeTask={removeTask}\n                      changeFilter={changeFilter}\n                      addTask={addTask}\n                      filter={filter}\n                      changeTaskStatus={changeTaskStatus}\n            />\n        </div>)\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}